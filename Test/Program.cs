using Descrambler;
using Oscam;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using static Oscam.FFDecsa;

namespace test
{
    class Program
    {
        static void Main(string[] args)
        {
        /*
            Transponder transponder = new Transponder(1, 11954, 27500, Transponder.polarisation.Horizontal, Transponder.dvbsystem.DVB_S, Transponder.fec.fec_34, Transponder.mtype.qpsk);
            Channel channel = new Channel(200, transponder);
            Descrambler.Descrambler s = new Descrambler.Descrambler(41000, channel, 40002);
            s.start();
         */   
            byte[] barr = new byte[16];
            Program p = new Program();
            Oscam.FFDecsa csa = new FFDecsa();
            csa.getOptimalSize();

            Oscam.Definitions.ca_descr_type cadescr = default;
            cadescr.index = 0;
            cadescr.parity = 0;
            cadescr.cw = new byte[8] { 0x0f, 0x1e, 0x2d, 0x3c, 0x4b, 0x5a, 0x69, 0x78 };
            csa.SetDescr(cadescr);
            cadescr.parity = 1;
            cadescr.cw = new byte[8] { 0x07, 0xe0, 0x1b, 0x02, 0xc9, 0xe0, 0x45, 0xee };
            csa.SetDescr(cadescr);

            byte[] test1_encrypted = new byte[] { 0x47, 0x00, 0x00, 0xd0,
                  0xde, 0xcf, 0x0a, 0x0d, 0xb2, 0xd7, 0xc4, 0x40, 0xde, 0x5d, 0x63, 0x18, 0x5a, 0x98, 0x17, 0xaa,
                  0xc9, 0xbc, 0x27, 0xc6, 0xcb, 0x49, 0x40, 0x48, 0xfd, 0x20, 0xb7, 0x05, 0x5b, 0x27, 0xcb, 0xeb,
                  0x9a, 0xf0, 0xac, 0x45, 0x6d, 0x56, 0xf4, 0x7b, 0x6f, 0xa0, 0x57, 0xf3, 0x9b, 0xf7, 0xa2, 0xc7,
                  0xd4, 0x68, 0x24, 0x00, 0x2f, 0x28, 0x13, 0x96, 0x94, 0xa8, 0x7c, 0xf4, 0x6f, 0x07, 0x2a, 0x0e,
                  0xe8, 0xa1, 0xeb, 0xc7, 0x80, 0xac, 0x1f, 0x79, 0xbf, 0x5d, 0xb6, 0x10, 0x7c, 0x2e, 0x52, 0xe9,
                  0x34, 0x2c, 0xa8, 0x39, 0x01, 0x73, 0x04, 0x24, 0xa8, 0x1e, 0xdb, 0x5b, 0xcb, 0x24, 0xf6, 0x31,
                  0xab, 0x02, 0x6b, 0xf9, 0xf6, 0xf7, 0xe9, 0x52, 0xad, 0xcf, 0x62, 0x0f, 0x42, 0xf6, 0x66, 0x5d,
                  0xc0, 0x86, 0xf2, 0x7b, 0x40, 0x20, 0xa9, 0xbd, 0x1f, 0xfd, 0x16, 0xad, 0x2e, 0x75, 0xa6, 0xa0,
                  0x85, 0xf3, 0x9c, 0x31, 0x20, 0x4e, 0xfb, 0x95, 0x61, 0x78, 0xce, 0x10, 0xc1, 0x48, 0x5f, 0xd3,
                  0x61, 0x05, 0x12, 0xf4, 0xe2, 0x04, 0xae, 0xe0, 0x86, 0x01, 0x56, 0x55, 0xb1, 0x0f, 0xa6, 0x33,
                  0x95, 0x20, 0x92, 0xf0, 0xbe, 0x39, 0x31, 0xe1, 0x2a, 0xf7, 0x93, 0xb4, 0xf7, 0xe4, 0xf1, 0x85,
                  0xae, 0x50, 0xf1, 0x63, 0xd4, 0x5d, 0x9c, 0x6c};
            byte[] test1_expected = new byte[] { 0x47, 0x00, 0x00, 0x10,
                  0xaf, 0xbe, 0xfb, 0xef, 0xbe, 0xfb, 0xef, 0xbe, 0xfb, 0xef, 0xbe, 0xfb, 0xe6, 0xb5, 0xad, 0x7c,
                  0xf9, 0xf3, 0xe5, 0xb1, 0x6c, 0x7c, 0xf9, 0xf3, 0xe6, 0xb5, 0xad, 0x6b, 0x5f, 0x3e, 0x7c, 0xf9,
                  0x6c, 0x5b, 0x1f, 0x3e, 0x7c, 0xf9, 0xad, 0x6b, 0x5a, 0xd7, 0xcf, 0x9f, 0x3e, 0x5b, 0x16, 0xc7,
                  0xcf, 0x9f, 0x3e, 0x6b, 0x5a, 0xd6, 0xb5, 0xf3, 0xe7, 0xcf, 0x96, 0xc5, 0xb1, 0xf3, 0xe7, 0xcf,
                  0x9a, 0xd6, 0xb5, 0xad, 0x7c, 0xf9, 0xf3, 0xe5, 0xb1, 0x6c, 0x7c, 0xf9, 0xf3, 0xe6, 0xb5, 0xad,
                  0x6b, 0x5f, 0x3e, 0x7c, 0xf9, 0x6c, 0x5b, 0x1f, 0x3e, 0x7c, 0xf9, 0xad, 0x6b, 0x5a, 0xd7, 0xcf,
                  0x9f, 0x3e, 0x5b, 0x16, 0xc7, 0xcf, 0x9f, 0x3e, 0x6b, 0x5a, 0xd6, 0xb5, 0xf3, 0xe7, 0xcf, 0x96,
                  0xc5, 0xb1, 0xf3, 0xe7, 0xcf, 0x9a, 0xd6, 0xb5, 0xad, 0x7c, 0xf9, 0xf3, 0xe5, 0xb1, 0x6c, 0x7c,
                  0xf9, 0xf3, 0xe6, 0xb5, 0xad, 0x6b, 0x5f, 0x3e, 0x7c, 0xf9, 0x6c, 0x5b, 0x1f, 0x3e, 0x7c, 0xf9,
                  0xad, 0x6b, 0x5a, 0xd7, 0xcf, 0x9f, 0x3e, 0x5b, 0x16, 0xc7, 0xcf, 0x9f, 0x3e, 0x6b, 0x5a, 0xd6,
                  0xb5, 0xf3, 0xe7, 0xcf, 0x96, 0xc5, 0xb1, 0xf3, 0xe7, 0xcf, 0x9a, 0xd0, 0x00, 0x00, 0x00, 0x00,
                  0xff, 0xfc, 0x44, 0x00, 0x66, 0xb1, 0x11, 0x11};
        
            byte[] onebuf = new byte[188];
            Stopwatch sw = new Stopwatch();
            sw.Start();
            for (int j = 0; j < 7000; j++)
            {
                Array.Copy(test1_encrypted, 0, onebuf, 0, 188);
                csa.DecryptPackets(onebuf, 0);
                if (onebuf.SequenceEqual(test1_expected))
                {
                    //Console.WriteLine("OK");
                }
                else
                {
                    Console.WriteLine("NOK");
                }
            }
            sw.Stop();
            Console.WriteLine("Single packet decrypt: " + sw.ElapsedTicks);
            sw.Reset();
            sw.Start();
            for (int j=0;j<1000;j++)
            {
                byte[] buf = new byte[188 * 7];
                for (int i = 0; i < 7; i += 1)
                {
                    Array.Copy(test1_encrypted, 0, buf, i * 188, 188);
                }
                csa.DecryptMultiple(buf, 0);
                for (int i = 0; i < 7; i += 1)
                {
                    Array.Copy(buf, i * 188, onebuf, 0, 188);
                    if (onebuf.SequenceEqual(test1_expected))
                    {
                        //Console.WriteLine("OK");
                    }
                    else
                    {
                        Console.WriteLine("NOK");
                    }
                }
            }
            sw.Stop();
            Console.WriteLine("Multiple packet decrypt: " + sw.ElapsedTicks);

        }
    }
}
